{
	"name": "dataflowEmp",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "EmpDS",
						"type": "DatasetReference"
					},
					"name": "EmployeeSource"
				},
				{
					"dataset": {
						"referenceName": "JobDS",
						"type": "DatasetReference"
					},
					"name": "JobSource"
				},
				{
					"dataset": {
						"referenceName": "DevTrainDS",
						"type": "DatasetReference"
					},
					"name": "DevTrainSource"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureBlobStorageSink",
						"type": "LinkedServiceReference"
					},
					"name": "sinkEmp"
				},
				{
					"linkedService": {
						"referenceName": "AzureBlobStorageSink",
						"type": "LinkedServiceReference"
					},
					"name": "sinkEmployeeByGender"
				}
			],
			"transformations": [
				{
					"name": "derivedDirtyEmpCol"
				},
				{
					"name": "Genderdivide"
				},
				{
					"name": "derivedDirtyJobCol"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Age as short,",
				"          Gender as string,",
				"          MaritalStatus as string,",
				"          EmployeeNumber as integer,",
				"          EmployeeName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     partitionBy('hash', 1)) ~> EmployeeSource",
				"source(output(",
				"          Attrition as string,",
				"          BusinessTravel as string,",
				"          Department as string,",
				"          JobLevel as string,",
				"          JobRole as string,",
				"          NumCompaniesWorked as string,",
				"          OverTime as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> JobSource",
				"source(output(",
				"          Education as string,",
				"          EducationField as string,",
				"          TrainingTimesLastYear as string,",
				"          EmployeeName as string,",
				"          EmployeeDTNumber as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     partitionBy('hash', 1)) ~> DevTrainSource",
				"EmployeeSource derive(EmployeeName = replace(EmployeeName, \",\", \" \"),",
				"          EmployeeNumber = replace(EmployeeNumber, \"#\", \"\"),",
				"          Gender = iif(isNull(Gender), \"LGBT\", replace(Gender, \"Felmeal\", \"Female\")),",
				"          MaritalStatus = replace(MaritalStatus, \"Singer\", \"Single\")) ~> derivedDirtyEmpCol",
				"derivedDirtyEmpCol aggregate(groupBy(Gender),",
				"     EmployeeByGender = count(),",
				"     partitionBy('hash', 1)) ~> Genderdivide",
				"JobSource derive(Attrition = iif(Attrition == 'Undefined', iif(OverTime == 'Yes', 'Yes', 'No'), Attrition),",
				"          BusinessTravel = replace(BusinessTravel, '$%^', '')) ~> derivedDirtyJobCol",
				"derivedDirtyEmpCol sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     container: 'containerkiki',",
				"     folderPath: 'folderkiki_clean',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     partitionFileNames:['Employee_Data.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkEmp",
				"Genderdivide sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     container: 'containerkiki',",
				"     folderPath: 'folderkiki_clean',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     partitionFileNames:['EmployeeGender_Data.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkEmployeeByGender"
			]
		}
	}
}